<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
<entry key="node_file" type="xstring" value="settings.xml"/>
<config key="flow_stack"/>
<config key="internal_node_subsettings">
<entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
</config>
<config key="model">
<entry key="script" type="xstring" value="library(flowWorkspace)%%00010directory &lt;- dirname(knime.flow.in[[&quot;files&quot;]])%%00010source &lt;- knime.flow.in[[&quot;wsp&quot;]]%%00010dir.create(paste(directory, &quot;/FlowJoFCSfiles&quot;, sep = &quot;&quot;))%%00010#dir.create(paste(directory, &quot;/flowWorkspace/PopStats&quot;, sep = &quot;&quot;))%%00010#dir.create(paste(directory, &quot;/flowWorkspace/Gating&quot;, sep = &quot;&quot;))%%00010#dir.create(paste(directory, &quot;/flowWorkspace/Hierarchy&quot;, sep = &quot;&quot;))%%00010#dir.create(paste(directory, &quot;/flowWorkspace/FCS&quot;, sep = &quot;&quot;))%%00010ws &lt;- openWorkspace(source)%%00010##I Guess flowJo Windows &gt; 9 fails...but not always???%%00010#G &lt;- parseWorkspace(%%00010#  ws, %%00010#  name = knime.flow.in[[&quot;name&quot;]], %%00010#  execute = TRUE, %%00010#  isNcdf = as.logical(knime.flow.in[[&quot;isNcdf&quot;]]),%%00010#  requiregates = as.logical(knime.flow.in[[&quot;requiregates&quot;]]),%%00010#  includeGates = as.logical(knime.flow.in[[&quot;includeGates&quot;]]),%%00010#  path = directory,%%00010#  sampNlo = &quot;sampleNode&quot;,%%00010#  compensation = NULL,%%00010#  options = NULL,%%00010#  extend_val = NULL,%%00010#  extend_to = NULL,%%00010#  leaf.bool = NULL,%%00010#  additional.keys = NULL,%%00010#  keywords = NULL,%%00010#  keywords.source = NULL,%%00010#  keywords.ignore.case = NULL)%%00010%%00010G &lt;- parseWorkspace(%%00010  ws, %%00010  name = knime.flow.in[[&quot;name&quot;]], %%00010  execute = TRUE, %%00010  isNcdf = as.logical(knime.flow.in[[&quot;isNcdf&quot;]]),%%00010  requiregates = as.logical(knime.flow.in[[&quot;requiregates&quot;]]),%%00010  includeGates = TRUE,%%00010  path = directory,%%00010  sampNlo = &quot;sampleNode&quot;%%00010)%%00010%%00010##Output some pretty pictures - I don't care about this too much here because the user already has the data in flowJo%%00010#for (i in 1:length(G)) {%%00010#  png(paste(directory, &quot;/flowWorkspace/Hierarchy/&quot;, sampleNames(G[[i]]), &quot;.png&quot;, sep = &quot;&quot;))%%00010#  plot(G[[i]])%%00010#  dev.off()%%00010#}%%00010#for (i in 1:length(G)) {%%00010#  popstats &lt;- as.data.frame(getPopStats(G[[i]], format = &quot;wide&quot;))%%00010#  nams &lt;- as.vector(sampleNames(G[[i]]))%%00010#  popstats[, &quot;Sample&quot;] &lt;- nams%%00010#  write.csv(popstats, paste(directory, &quot;/flowWorkspace/PopStats/&quot;, sampleNames(G[[i]]), &quot;.csv&quot;, sep = &quot;&quot;))%%00010#}%%00010#for (i in 1:length(G)) {%%00010#    png(paste(directory, &quot;/flowWorkspace/Gating/&quot;, sampleNames(G[[i]]), &quot;.png&quot;, sep = &quot;&quot;))%%00010#    myplot &lt;- plotGate(x = G[[i]], bool = TRUE, fitGate = TRUE, xlim = &quot;data&quot;, ylim = &quot;data&quot;, smooth = FALSE, xbin = 0, arrange = FALSE, merge = FALSE, sep = &quot;&quot;)%%00010#    print(myplot)%%00010#    dev.off() %%00010#}%%00010###Merge the popstats from each individual file into one single file%%00010#path = paste(directory, &quot;/flowWorkspace/PopStats/&quot;, sep = &quot;&quot;)%%00010#out.file &lt;- &quot;&quot;%%00010#file.names &lt;- dir(path, pattern = &quot;csv&quot;)%%00010#for (i in 1:length(file.names)) {%%00010#  file &lt;- read.table(paste(path, file.names[i], sep = &quot;&quot;), header = TRUE, sep = &quot;,&quot;)%%00010#  out.file &lt;- rbind(out.file, file)%%00010#}%%00010#write.table(out.file[-1,-1], file = paste(path, &quot;All.PopStats.csv&quot;, sep = &quot;&quot;), sep = &quot;,&quot;, row.names = FALSE)%%00010##Create directories to write out FCS files for each individual sample%%00010for (i in 1:length(G)) {%%00010  dir.create(paste(directory, &quot;/FlowJoFCSfiles/&quot;, sampleNames(G[[i]]), sep = &quot;&quot;))%%00010}%%00010##Not every sample may have the same gating structure, so create a list of data frames that contain all the nodes for each sample%%00010nodes &lt;- list()%%00010for (i in 1:length(G)) {%%00010  nodes[i] &lt;- as.data.frame(getNodes(G[[i]], path = &quot;auto&quot;))%%00010}%%00010##Gates files by first looping through files (outer loop) and then looping through specific nodes (inner loop)%%00010for(i in 1:length(G)) {%%00010  for (j in 1:nrow(as.data.frame(nodes[i]))) {%%00010    gated_data &lt;- getData(G[[i]], as.character(as.data.frame(nodes[i])[j,]))%%00010    write.FCS(gated_data, paste(directory, &quot;/FlowJoFCSfiles/&quot;, sampleNames(G[[i]]), &quot;/&quot;, as.character(as.data.frame(nodes[i])[j,]), &quot;_&quot;, sampleNames(G[[i]]), sep = &quot;&quot;), what=&quot;numeric&quot;)%%00010  }%%00010}%%00010##Output final population statistics%%00010#knime.out &lt;- out.file[-1,-1]%%00010knime.out &lt;- as.data.frame(exprs(read.FCS(paste(directory, &quot;/FlowJoFCSfiles/&quot;, sampleNames(G[[i]]), &quot;/&quot;, as.character(as.data.frame(nodes[i])[j,]), &quot;_&quot;, sampleNames(G[[i]]), sep = &quot;&quot;))))"/>
<entry key="templateUUID" type="xstring" isnull="true" value=""/>
<entry key="version" type="xstring" value="version 1.x"/>
<entry key="Output non numbers (NaN, Inf, -Inf) as missing cells" type="xboolean" value="false"/>
</config>
<config key="nodeAnnotation">
<entry key="text" type="xstring" value=""/>
<entry key="bgcolor" type="xint" value="16777215"/>
<entry key="x-coordinate" type="xint" value="875"/>
<entry key="y-coordinate" type="xint" value="245"/>
<entry key="width" type="xint" value="134"/>
<entry key="height" type="xint" value="18"/>
<entry key="alignment" type="xstring" value="CENTER"/>
<entry key="borderSize" type="xint" value="0"/>
<entry key="borderColor" type="xint" value="16777215"/>
<entry key="defFontSize" type="xint" value="11"/>
<entry key="annotation-version" type="xint" value="20151123"/>
<config key="styles"/>
</config>
<entry key="customDescription" type="xstring" isnull="true" value=""/>
<entry key="state" type="xstring" value="IDLE"/>
<entry key="factory" type="xstring" value="org.knime.r.RSnippetNodeFactory"/>
<entry key="node-name" type="xstring" value="R Snippet"/>
<entry key="node-bundle-name" type="xstring" value="KNIME R-Project nodes"/>
<entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.r"/>
<entry key="node-bundle-vendor" type="xstring" value="KNIME GmbH, Konstanz, Germany"/>
<entry key="node-bundle-version" type="xstring" value="3.1.3.v201604221432"/>
<entry key="node-feature-name" type="xstring" value="KNIME Interactive R Statistics Integration"/>
<entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.r.feature.group"/>
<entry key="node-feature-vendor" type="xstring" value="KNIME GmbH, Konstanz, Germany"/>
<entry key="node-feature-version" type="xstring" value="3.1.3.v201604221432"/>
<config key="factory_settings"/>
<entry key="name" type="xstring" value="R Snippet"/>
<entry key="hasContent" type="xboolean" value="false"/>
<entry key="isInactive" type="xboolean" value="false"/>
<config key="ports">
<config key="port_1">
<entry key="index" type="xint" value="1"/>
<entry key="port_dir_location" type="xstring" isnull="true" value=""/>
</config>
</config>
<config key="filestores">
<entry key="file_store_location" type="xstring" isnull="true" value=""/>
<entry key="file_store_id" type="xstring" isnull="true" value=""/>
</config>
</config>
