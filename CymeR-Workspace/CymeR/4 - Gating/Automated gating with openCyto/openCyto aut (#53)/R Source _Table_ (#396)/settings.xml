<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
<entry key="node_file" type="xstring" value="settings.xml"/>
<config key="flow_stack"/>
<config key="internal_node_subsettings">
<entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
</config>
<config key="model">
<entry key="script" type="xstring" value="library(flowWorkspace)%%00010library(openCyto)%%00010library(flowDensity)%%00010library(parallel)%%00010library(RGtk2)%%00010library(RGtk2Extras)%%00010library(QUALIFIER)%%00010library(CytoML)%%00010%%00010##Create neccesary downstream directories%%00010directory &lt;- dirname(knime.flow.in[[&quot;files&quot;]])%%00010dir.create(paste(directory, &quot;/OpenCyto&quot;, sep = &quot;&quot;))%%00010dir.create(paste(directory, &quot;/OpenCyto/PopStats&quot;, sep = &quot;&quot;))%%00010dir.create(paste(directory, &quot;/OpenCyto/Gating&quot;, sep = &quot;&quot;))%%00010dir.create(paste(directory, &quot;/OpenCyto/Hierarchy&quot;, sep = &quot;&quot;))%%00010dir.create(paste(directory, &quot;/OpenCyto/FCS&quot;, sep = &quot;&quot;))%%00010%%00010##Set minimum number of cells for gating%%00010options(&quot;openCyto&quot; = list(gating = list(minEvents = knime.flow.in[[&quot;minCells&quot;]])))%%00010%%00010##Allow tab to be a file delimiter%%00010delim = knime.flow.in[[&quot;delimiter&quot;]]%%00010if (delim == &quot;\\t&quot;) {%%00010  delim = &quot;\t&quot;%%00010}%%00010%%00010##Read files into memory or read and write to disk%%00010if (knime.flow.in[[&quot;isNcdf&quot;]] == TRUE) {%%00010  files &lt;- list.files(dirname(knime.flow.in[[&quot;files&quot;]]), full.names = TRUE, pattern = &quot;.fcs&quot;)%%00010  fs &lt;- read.ncdfFlowSet(files = files, mc.cores = knime.flow.in[[&quot;num.cores&quot;]])%%00010} else {%%00010  fs &lt;- read.flowSet(files = NULL, path = dirname(knime.flow.in[[&quot;files&quot;]]), pattern = &quot;.fcs&quot;, alter.names = FALSE)%%00010}%%00010%%00010##Read gating template, allow temporary changes and then gate using multiple cores%%00010new_table &lt;- as.matrix(dfedit(read.table(knime.flow.in[[&quot;template&quot;]], header = TRUE, sep = delim), dataset.name = &quot;Manipulate if desired and then press OK. The original version will not be altered.&quot;, col.width = 300))%%00010write.csv(new_table, paste(&quot;/home/developer/Templates/Gating/Copy/Copy_&quot;, basename(knime.flow.in[[&quot;template&quot;]]), sep = &quot;,&quot;), row.names = FALSE)%%00010gtFile &lt;- read.csv(paste(&quot;/home/developer/Templates/Gating/Copy/Copy_&quot;, basename(knime.flow.in[[&quot;template&quot;]]), sep = &quot;,&quot;))%%00010gt &lt;- gatingTemplate(paste(&quot;/home/developer/Templates/Gating/Copy/Copy_&quot;, basename(knime.flow.in[[&quot;template&quot;]]), sep = &quot;,&quot;))%%00010G &lt;- GatingSet(fs)%%00010gating(gt, G,  parallel_type = &quot;multicore&quot;, mc.cores = knime.flow.in[[&quot;num.cores&quot;]])%%00010%%00010##Output gating template graph%%00010for (i in 1:length(G)) {%%00010  png(paste(directory, &quot;/OpenCyto/Hierarchy/&quot;, sampleNames(G[[i]]), &quot;.png&quot;, sep = &quot;&quot;))%%00010  plot(G[[i]])%%00010  dev.off()%%00010}%%00010%%00010##Output PopStats per file%%00010if (knime.flow.in[[&quot;popstats&quot;]] == &quot;TRUE&quot;) {%%00010  dir.create(paste(directory, &quot;/OpenCyto/PopStats/PopStats&quot;, sep = &quot;&quot;))%%00010  for (i in 1:length(G)) {%%00010    popstats &lt;- as.data.frame(getPopStats(G[[i]], format = &quot;wide&quot;))%%00010    nams &lt;- as.vector(sampleNames(G[[i]]))%%00010    popstats[, &quot;Sample&quot;] &lt;- nams%%00010    write.csv(popstats, paste(directory, &quot;/OpenCyto/PopStats/PopStats/&quot;, sampleNames(G[[i]]), &quot;.csv&quot;, sep = &quot;&quot;))%%00010  }%%00010##Merge the popstats from each individual file into one single file%%00010  path = paste(dirname(knime.flow.in[[&quot;files&quot;]]), &quot;/OpenCyto/PopStats/PopStats&quot;, sep = &quot;&quot;)%%00010  out.file &lt;- &quot;&quot;%%00010  file.names &lt;- dir(path, pattern = &quot;fcs.csv&quot;)%%00010  for (i in 1:length(file.names)) {%%00010    file &lt;- read.table(paste(path, &quot;/&quot;, file.names[i], sep = &quot;&quot;), header = TRUE, sep = &quot;,&quot;)%%00010    out.file &lt;- rbind(out.file, file)%%00010  }%%00010  write.table(out.file[-1,-1], file = paste(dirname(path), &quot;/All.PopStats.csv&quot;, sep = &quot;&quot;), sep = &quot;,&quot;, row.names = FALSE)%%00010}%%00010%%00010##Output MFIs per file%%00010if (knime.flow.in[[&quot;MFI&quot;]] == &quot;TRUE&quot;) {%%00010  dir.create(paste(directory, &quot;/OpenCyto/PopStats/MFIs&quot;, sep = &quot;&quot;))%%00010  for (i in 1:length(G)) {%%00010    MFIs &lt;- lapply(G, getQAStats, isMFI = TRUE)%%00010    nams &lt;- as.vector(sampleNames(G[[i]]))%%00010    MFIs[[i]][, &quot;Sample&quot;] &lt;- nams%%00010    write.csv(MFIs[[i]], paste(directory, &quot;/OpenCyto/PopStats/MFIs/&quot;, sampleNames(G[[i]]), &quot;.csv&quot;, sep = &quot;&quot;))%%00010  }%%00010##Merge the MFIs from each individual file into one single file%%00010  path = paste(dirname(knime.flow.in[[&quot;files&quot;]]), &quot;/OpenCyto/PopStats/MFIs/&quot;, sep = &quot;&quot;)%%00010  out.file &lt;- &quot;&quot;%%00010  file.names &lt;- dir(path, pattern = &quot;fcs.csv&quot;)%%00010  for (i in 1:length(file.names)) {%%00010    file &lt;- read.table(paste(path, file.names[i], sep = &quot;&quot;), header = TRUE, sep = &quot;,&quot;)%%00010    out.file &lt;- rbind(out.file, file)%%00010  }%%00010  write.table(out.file[-1,-1], file = paste(dirname(path), &quot;/All.MFIs.csv&quot;, sep = &quot;&quot;), sep = &quot;,&quot;, row.names = FALSE)%%00010}%%00010%%00010##Set-up default.y = ydim[j,2]%%00010#  fillme &lt;- as.data.frame(matrix(data = &quot;NA&quot;, nrow = nrow(aliasOneD), ncol = 1), stringsAsFactors = FALSE)%%00010#  names(fillme)[1] &lt;- &quot;ydim&quot;%%00010#  edit &lt;- cbind(aliasOneD, fillme)%%00010#  ydim &lt;- dfedit(edit, col.width = 300, dataset.name = &quot;Insert the desired y-axis for each population that will be one dimensionally gated. If you leave it NA it will default to SSC.A&quot;)%%00010#  for (k in 1:nrow(ydim)) {%%00010#  %%00009if ((ydim[k,2] == &quot;NA&quot;) == TRUE) {%%00010#  %%00009  ydim[k,2] &lt;- &quot;SSC.A&quot;%%00010#  %%00009}%%00010#  }%%00010%%00010##Remove columns with commas and blank spaces for density plotting and then plot%%00010if (knime.flow.in[[&quot;densityplot&quot;]] == &quot;TRUE&quot;) {%%00010  gtFile2 &lt;- read.table(paste(&quot;/home/developer/Templates/Gating/Copy/Copy_&quot;, basename(knime.flow.in[[&quot;template&quot;]]), sep = &quot;,&quot;), na.strings = &quot;&quot;, header = TRUE, sep = &quot;,&quot;)%%00010  frameOneD &lt;- gtFile2[c(&quot;alias&quot;,&quot;dims&quot;,&quot;pop&quot;)]%%00010  frameOneD &lt;- frameOneD[!(is.na(frameOneD$dims)), ]%%00010  frameOneD &lt;- as.data.frame(frameOneD)%%00010  frameOneD &lt;- frameOneD[!grepl(&quot;,&quot;, frameOneD$dims), ]%%00010  frameOneD &lt;- as.data.frame(frameOneD)%%00010  aliasOneD &lt;- as.data.frame(frameOneD[,1])%%00010  dimsOneD &lt;- as.data.frame(frameOneD[,2])%%00010  popOneD &lt;- as.data.frame(frameOneD[,3])%%00010  #as.character(popOneD[j,])%%00010##Set-up default.y = ydim[j,2]%%00010  names(aliasOneD)[1] &lt;- &quot;populations&quot;%%00010  fillme &lt;- as.data.frame(matrix(data = &quot;NA&quot;, nrow = nrow(aliasOneD), ncol = 1), stringsAsFactors = FALSE)%%00010  names(fillme)[1] &lt;- &quot;ydim&quot;%%00010  edit &lt;- cbind(aliasOneD, fillme)%%00010  ydim &lt;- dfedit(edit, col.width = 300, dataset.name = &quot;Insert the desired y-axis for each population that will be one dimensionally gated. If you leave it NA it will default to SSC.A&quot;)%%00010  for (k in 1:nrow(ydim)) {%%00010  %%00009if ((ydim[k,2] == &quot;NA&quot;) == TRUE) {%%00010  %%00009  ydim[k,2] &lt;- &quot;SSC.A&quot;%%00010  %%00009}%%00010  }%%00010##Draw pictures%%00010  for (i in 1:length(G)) {%%00010    for (j in 1:nrow(aliasOneD)) {%%00010      if (as.character(aliasOneD[j,]) != &quot;root&quot;) {%%00010         png(paste(directory, &quot;/OpenCyto/Gating/&quot;, sampleNames(G[[i]]), &quot;_&quot;, j, &quot;_density.png&quot;, sep = &quot;&quot;))%%00010         myplot &lt;- plotGate(x = G[[i]], y = as.character(aliasOneD[j,]), default.y = ydim[j,2], bool = TRUE, strip = FALSE, type = &quot;densityplot&quot;, raw.scale = TRUE, fitGate = TRUE, xlim = &quot;data&quot;, smooth = FALSE, arrange = FALSE, merge = FALSE, main = as.character(popOneD[j,]))%%00010         print(myplot)%%00010         dev.off() %%00010       }%%00010    }%%00010  }%%00010}%%00010graphics.off()%%00010%%00010##xy plotting - if there is a plotting error, just skip it%%00010##projections are how you set up custom xy-axis, for example%%00010##projections = list(&quot;lymph&quot; = c(x =&quot;SSC-A&quot;, y = &quot;FSC-A&quot;), &quot;CD3&quot; = c(x = &quot;CD3&quot;, y = &quot;SSC-A&quot;))%%00010if (knime.flow.in[[&quot;xyplot&quot;]] == &quot;TRUE&quot;) {%%00010  nodes &lt;- as.data.frame(getNodes(G, path = &quot;auto&quot;))%%00010  names(nodes)[1] &lt;- &quot;populations&quot;%%00010  for (i in 1:length(G)) {%%00010    for (j in 1:nrow(nodes)) {%%00010%%00009    possibleError &lt;- tryCatch(if (as.character(nodes[j,]) != &quot;root&quot;) {%%00010         png(paste(directory, &quot;/OpenCyto/Gating/&quot;, sampleNames(G[[i]]), &quot;_&quot;, j, &quot;.png&quot;, sep = &quot;&quot;))%%00010         myplot &lt;- plotGate(x = G[[i]], y = as.character(nodes[j,]), default.y = &quot;SSC.A&quot;, strip = FALSE, bool = TRUE, type = &quot;xyplot&quot;, xbin = knime.flow.in[[&quot;hexbin&quot;]], raw.scale = FALSE, fitGate = TRUE, xlim = &quot;data&quot;, smooth = FALSE, arrange = FALSE, merge = FALSE,  main = as.character(nodes[j,]))%%00010         print(myplot)%%00010         dev.off()%%00010       }, error = function(e) e)%%00010    }%%00010  }%%00010}%%00010graphics.off()%%00010%%00010##xy plotting%%00010##if (knime.flow.in[[&quot;xyplot&quot;]] == &quot;TRUE&quot;) {%%00010##  nodes &lt;- as.data.frame(getNodes(G, path = &quot;auto&quot;))%%00010##  names(nodes)[1] &lt;- &quot;populations&quot;%%00010##  fillme &lt;- as.data.frame(matrix(data = &quot;NA&quot;, nrow = nrow(nodes), ncol = 1))%%00010##  names(fillme)[1] &lt;- &quot;ydim&quot;%%00010##  edit &lt;- cbind(nodes, fillme)%%00010##  ydim &lt;- dfedit(edit, col.width = 300, dataset.name = &quot;Insert the desired y-axis for each population that will be gated. If you leave it NA it will default to SSC-A. This is used for the gating plots.&quot;)%%00010  #as.character(nodes[j,])%%00010##  for (i in 1:length(G)) {%%00010##    for (j in 1:nrow(nodes)) {%%00010##      if (as.character(nodes[j,]) != &quot;root&quot;) {%%00010##         png(paste(directory, &quot;/OpenCyto/Gating/&quot;, sampleNames(G[[i]]), &quot;_&quot;, j, &quot;.png&quot;, sep = &quot;&quot;))%%00010##         myplot &lt;- plotGate(x = G[[i]], y = as.character(nodes[j,]), default.y = as.character(ydim[j,2]), strip = FALSE, bool = TRUE, type = &quot;xyplot&quot;, xbin = knime.flow.in[[&quot;hexbin&quot;]], raw.scale = FALSE, fitGate = TRUE, xlim = &quot;data&quot;, smooth = FALSE, arrange = FALSE, merge = FALSE,  main = as.character(nodes[j,]))%%00010##         print(myplot)%%00010##         dev.off() %%00010##       }%%00010##    }%%00010##  }%%00010##}%%00010%%00010##Create directories to write out FCS files for each individual sample%%00010if (knime.flow.in[[&quot;FCS&quot;]] == &quot;TRUE&quot;) {%%00010  for (i in 1:length(G)) {%%00010    dir.create(paste(dirname(knime.flow.in[[&quot;files&quot;]]), &quot;/OpenCyto/FCS/&quot;, sampleNames(G[[i]]), sep = &quot;&quot;))%%00010  }%%00010##Not every sample may have the same gating structure, so create a list of data frames that contain all the nodes for each sample%%00010  nodes &lt;- list()%%00010  for (i in 1:length(G)) {%%00010    nodes[i] &lt;- as.data.frame(getNodes(G[[i]], path = &quot;auto&quot;))%%00010  }%%00010##Gates files by first looping through files (outer loop) and then looping through specific nodes (inner loop)%%00010  for(i in 1:length(G)) {%%00010    for (j in 1:nrow(as.data.frame(nodes[i]))) {%%00010      gated_data &lt;- getData(G[[i]], as.character(as.data.frame(nodes[i])[j,]))%%00010      write.FCS(gated_data, paste(dirname(knime.flow.in[[&quot;files&quot;]]), &quot;/OpenCyto/FCS/&quot;, sampleNames(G[[i]]), &quot;/&quot;, as.character(as.data.frame(nodes[i])[j,]), &quot;_&quot;, sampleNames(G[[i]]), sep = &quot;&quot;), what=&quot;numeric&quot;)%%00010    }%%00010  }%%00010}%%00010%%00010##Export the existing GatingSet from openCyto to Cytobank%%00010#cytofile &lt;- paste(dirname(knime.flow.in[[&quot;files&quot;]]), &quot;/OpenCyto/&quot;, &quot;Cytobank.xml&quot;, sep = &quot;&quot;)%%00010#GatingSet2cytobank(G, cytofile)%%00010%%00010##Export the existing GatingSet from openCyto to FlowJo%%00010#flowjofile &lt;- paste(dirname(knime.flow.in[[&quot;files&quot;]]), &quot;/OpenCyto/&quot;, &quot;FlowJo.wsp&quot;, sep = &quot;&quot;)%%00010#..........%%00010%%00010##Folder path for downstream functions%%00010path &lt;- as.data.frame(knime.flow.in[[&quot;files&quot;]])%%00010#errors &lt;- as.data.frame(capture.output(possibleError))%%00010#warnings &lt;- as.data.frame(capture.output(warnings()))%%00010knime.out &lt;- path%%00010%%00010"/>
<entry key="templateUUID" type="xstring" isnull="true" value=""/>
<entry key="version" type="xstring" value="version 1.x"/>
<entry key="Output non numbers (NaN, Inf, -Inf) as missing cells" type="xboolean" value="false"/>
</config>
<config key="nodeAnnotation">
<entry key="text" type="xstring" value=""/>
<entry key="bgcolor" type="xint" value="16777215"/>
<entry key="x-coordinate" type="xint" value="553"/>
<entry key="y-coordinate" type="xint" value="439"/>
<entry key="width" type="xint" value="134"/>
<entry key="height" type="xint" value="18"/>
<entry key="alignment" type="xstring" value="CENTER"/>
<entry key="borderSize" type="xint" value="0"/>
<entry key="borderColor" type="xint" value="16777215"/>
<entry key="defFontSize" type="xint" value="10"/>
<entry key="annotation-version" type="xint" value="20151123"/>
<config key="styles"/>
</config>
<entry key="customDescription" type="xstring" isnull="true" value=""/>
<entry key="state" type="xstring" value="CONFIGURED"/>
<entry key="factory" type="xstring" value="org.knime.r.RReaderTableNodeFactory"/>
<entry key="node-name" type="xstring" value="R Source (Table)"/>
<entry key="node-bundle-name" type="xstring" value="KNIME R-Project nodes"/>
<entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.r"/>
<entry key="node-bundle-vendor" type="xstring" value="KNIME GmbH, Konstanz, Germany"/>
<entry key="node-bundle-version" type="xstring" value="3.1.3.v201604221432"/>
<entry key="node-feature-name" type="xstring" value="KNIME Interactive R Statistics Integration"/>
<entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.r.feature.group"/>
<entry key="node-feature-vendor" type="xstring" value="KNIME GmbH, Konstanz, Germany"/>
<entry key="node-feature-version" type="xstring" value="3.1.3.v201604221432"/>
<config key="factory_settings"/>
<entry key="name" type="xstring" value="R Source (Table)"/>
<entry key="hasContent" type="xboolean" value="false"/>
<entry key="isInactive" type="xboolean" value="false"/>
<config key="ports">
<config key="port_1">
<entry key="index" type="xint" value="1"/>
<entry key="port_dir_location" type="xstring" isnull="true" value=""/>
</config>
</config>
<config key="filestores">
<entry key="file_store_location" type="xstring" isnull="true" value=""/>
<entry key="file_store_id" type="xstring" isnull="true" value=""/>
</config>
</config>
