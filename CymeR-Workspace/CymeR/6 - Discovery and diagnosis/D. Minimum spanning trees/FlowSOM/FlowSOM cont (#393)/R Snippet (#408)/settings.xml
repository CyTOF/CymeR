<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
<entry key="node_file" type="xstring" value="settings.xml"/>
<config key="flow_stack"/>
<config key="internal_node_subsettings">
<entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
</config>
<config key="model">
<entry key="script" type="xstring" value="library(flowCore)%%00010library(Biobase)%%00010library(FlowSOM)%%00010library(foreach)%%00010library(doParallel)%%00010library(parallel)%%00010library(igraph)%%00010library(plyr)%%00010numCores &lt;- knime.flow.in[[&quot;num.cores&quot;]]%%00010cl &lt;- makeCluster(numCores)%%00010registerDoParallel(cl)%%00010dir.create(paste(knime.flow.in[[&quot;dirname&quot;]], &quot;/FlowSOM&quot;, sep = &quot;&quot;))%%00010dir.create(paste(knime.flow.in[[&quot;dirname&quot;]], &quot;/FlowSOM/&quot;, &quot;NewFCSFiles&quot;, sep = &quot;&quot;))%%00010dir.create(paste(knime.flow.in[[&quot;dirname&quot;]], &quot;/FlowSOM/&quot;, &quot;FlowSOMGraphs&quot;, sep = &quot;&quot;))%%00010dir.create(paste(knime.flow.in[[&quot;dirname&quot;]], &quot;/FlowSOM/&quot;, &quot;FlowSOMGraphs/Scatterplots&quot;, sep = &quot;&quot;))%%00010dir.create(paste(knime.flow.in[[&quot;dirname&quot;]], &quot;/FlowSOM/&quot;, &quot;FlowSOMGraphs/GML&quot;, sep = &quot;&quot;))%%00010dir.create(paste(knime.flow.in[[&quot;dirname&quot;]], &quot;/FlowSOM/&quot;, &quot;FlowSOMGraphs/StarPlots&quot;, sep = &quot;&quot;))%%00010dir.create(paste(knime.flow.in[[&quot;dirname&quot;]], &quot;/FlowSOM/&quot;, &quot;RData&quot;, sep = &quot;&quot;))%%00010processInput &lt;- function(i, j) {  %%00010  cols &lt;- knime.in%%00010  fs &lt;- read.flowSet(files = NULL, path = knime.flow.in[[&quot;dirname&quot;]], pattern = &quot;fcs&quot;)%%00010  fsom &lt;- ReadInput(fs[[i]], pattern = &quot;.fcs&quot;, compensate = FALSE, spillover = NULL, transform = FALSE, toTransform = NULL, scale = knime.flow.in[[&quot;scale&quot;]], silent = FALSE)%%00010  #fsom2 &lt;- BuildSOM(fsom, colsToUse = t(cols), silent = FALSE, dim = , ydim = , rlen = , mst = , alpha = , radius = , init = , distf = )%%00010  fsom2 &lt;- BuildSOM(fsom, colsToUse = t(cols), silent = FALSE)%%00010  fsom3 &lt;- BuildMST(fsom2, silent = FALSE, tSNE = as.logical(knime.flow.in[[&quot;tsne&quot;]]))%%00010  fsom3$map$medianValues[is.na(fsom3$map$medianValues)] &lt;- 0%%00010  save(fsom3, file = paste(knime.flow.in[[&quot;dirname&quot;]], &quot;/FlowSOM/&quot;, &quot;/RData/&quot;, sampleNames(fs[i]), &quot;.RData&quot;, sep = &quot;&quot;))%%00010  metaClustering &lt;- metaClustering_consensus(fsom3$map$codes)%%00010  new.cols &lt;- as.matrix(metaClustering[fsom3$map$mapping[,1]])%%00010  new.cols2 &lt;- as.matrix(fsom3$map$mapping[,1])%%00010  channel_number &lt;- ncol(fs[[i]]) + 1;%%00010  channel_id     &lt;- paste(&quot;$P&quot;, channel_number, sep=&quot;&quot;);%%00010  channel_name   &lt;- &quot;FlowSOMmetaClusters&quot;;%%00010  channel_range  &lt;- max(new.cols[,1]) + 1;%%00010  plist &lt;- matrix(c(channel_name, channel_name, channel_range, 0, channel_range - 1));%%00010  rownames(plist) &lt;- c(&quot;name&quot;, &quot;desc&quot;, &quot;range&quot;, &quot;minRange&quot;, &quot;maxRange&quot;);%%00010  colnames(plist) &lt;- c(channel_id);%%00010  channel_number2 &lt;- ncol(fs[[i]]) + 2;%%00010  channel_id2     &lt;- paste(&quot;$P&quot;, channel_number2, sep=&quot;&quot;);%%00010  channel_name2   &lt;- &quot;FlowSOMclusters&quot;;%%00010  channel_range2  &lt;- max(new.cols2[,1]) + 1;%%00010  plist2 &lt;- matrix(c(channel_name2, channel_name2, channel_range2, 0, channel_range2 - 1));%%00010  rownames(plist2) &lt;- c(&quot;name&quot;, &quot;desc&quot;, &quot;range&quot;, &quot;minRange&quot;, &quot;maxRange&quot;);%%00010  colnames(plist2) &lt;- c(channel_id2);%%00010  params &lt;- parameters(fs[[i]]);%%00010  pd &lt;- pData(params);%%00010  pd &lt;- rbind(pd, t(plist), t(plist2));%%00010  pData(params) &lt;- pd;%%00010  out_data &lt;- cbind(exprs(fs[[i]]), &quot;FlowSOMmetaClusters&quot; = new.cols[,1], &quot;FlowSOMclusters&quot; = new.cols2[,1]);%%00010  out_frame &lt;- flowFrame(out_data, params, description = description(fs[[i]]));%%00010  write.FCS(out_frame, paste(knime.flow.in[[&quot;dirname&quot;]], &quot;/FlowSOM/NewFCSFiles/&quot;, sampleNames(fs[i]), sep = &quot;&quot;), what=&quot;numeric&quot;)%%00010  size &lt;- as.data.frame(fsom3$MST$size)%%00010  size &lt;- rename(size, c(&quot;fsom3$MST$size&quot; = &quot;FlowSOMsize&quot;))%%00010  xy &lt;- as.data.frame(fsom3$MST$l)%%00010  xy &lt;- rename(xy, c(&quot;V1&quot; = &quot;FlowSOMdim1&quot;, &quot;V2&quot; = &quot;FlowSOMdim2&quot;))%%00010  vals &lt;- as.data.frame(fsom3$map$medianValues)%%00010  metaclust &lt;- as.data.frame(metaClustering)%%00010  metaclust &lt;- rename(metaclust, c(&quot;metaClustering&quot; = &quot;FlowSOMmetaClusters&quot;))%%00010  ID &lt;- as.data.frame(as.numeric(rownames(xy)))%%00010  ID &lt;- rename(ID, c(&quot;as.numeric(rownames(xy))&quot; = &quot;ID&quot;))%%00010  write.table(cbind(xy, size, vals, metaclust[,1], ID), file = paste(knime.flow.in[[&quot;dirname&quot;]], &quot;/FlowSOM/&quot;, &quot;FlowSOMGraphs/Scatterplots/&quot;, sampleNames(fs[i]), &quot;.csv&quot;, sep = &quot;&quot;), row.names = FALSE, col.names = TRUE, sep = &quot;,&quot;)%%00010  if (knime.flow.in[[&quot;tsne&quot;]] == TRUE) {%%00010    png(paste(knime.flow.in[[&quot;dirname&quot;]], &quot;/FlowSOM/&quot;, &quot;FlowSOMGraphs/StarPlots/&quot;, sampleNames(fs[i]), &quot;.MST.png&quot;, sep = &quot;&quot;))%%00010    PlotStars(fsom3, markers = fsom3$map$colsUsed, view = &quot;MST&quot;, legend = knime.flow.in[[&quot;legend&quot;]], main = sampleNames(fs[i]), colorPalette = colorRampPalette(c(&quot;#00007F&quot;, &quot;blue&quot;, &quot;#007FFF&quot;, &quot;cyan&quot;, &quot;#7FFF7F&quot;, &quot;yellow&quot;, &quot;#FF7F00&quot;, &quot;red&quot;, &quot;#7F0000&quot;)))%%00010    dev.off()%%00010    png(paste(knime.flow.in[[&quot;dirname&quot;]], &quot;/FlowSOM/&quot;, &quot;FlowSOMGraphs/StarPlots/&quot;, sampleNames(fs[i]), &quot;.tSNE.png&quot;, sep = &quot;&quot;))%%00010    PlotStars(fsom3, markers = fsom3$map$colsUsed, view = &quot;tSNE&quot;, legend = knime.flow.in[[&quot;legend&quot;]], main = sampleNames(fs[i]), colorPalette = colorRampPalette(c(&quot;#00007F&quot;, &quot;blue&quot;, &quot;#007FFF&quot;, &quot;cyan&quot;, &quot;#7FFF7F&quot;, &quot;yellow&quot;, &quot;#FF7F00&quot;, &quot;red&quot;, &quot;#7F0000&quot;)))%%00010    dev.off()%%00010    png(paste(knime.flow.in[[&quot;dirname&quot;]], &quot;/FlowSOM/&quot;, &quot;FlowSOMGraphs/StarPlots/&quot;, sampleNames(fs[i]), &quot;.grid.png&quot;, sep = &quot;&quot;))%%00010    PlotStars(fsom3, markers = fsom3$map$colsUsed, view = &quot;grid&quot;, legend = knime.flow.in[[&quot;legend&quot;]], main = sampleNames(fs[i]), colorPalette = colorRampPalette(c(&quot;#00007F&quot;, &quot;blue&quot;, &quot;#007FFF&quot;, &quot;cyan&quot;, &quot;#7FFF7F&quot;, &quot;yellow&quot;, &quot;#FF7F00&quot;, &quot;red&quot;, &quot;#7F0000&quot;)))%%00010    dev.off()%%00010  } else {%%00010    png(paste(knime.flow.in[[&quot;dirname&quot;]], &quot;/FlowSOM/&quot;, &quot;FlowSOMGraphs/StarPlots/&quot;, sampleNames(fs[i]), &quot;.grid.png&quot;, sep = &quot;&quot;))%%00010    PlotStars(fsom3, markers = fsom3$map$colsUsed, view = &quot;grid&quot;, legend = knime.flow.in[[&quot;legend&quot;]], main = sampleNames(fs[i]), colorPalette = colorRampPalette(c(&quot;#00007F&quot;, &quot;blue&quot;, &quot;#007FFF&quot;, &quot;cyan&quot;, &quot;#7FFF7F&quot;, &quot;yellow&quot;, &quot;#FF7F00&quot;, &quot;red&quot;, &quot;#7F0000&quot;)))%%00010    dev.off()%%00010    png(paste(knime.flow.in[[&quot;dirname&quot;]], &quot;/FlowSOM/&quot;, &quot;FlowSOMGraphs/StarPlots/&quot;, sampleNames(fs[i]), &quot;.MST.png&quot;, sep = &quot;&quot;))%%00010    PlotStars(fsom3, markers = fsom3$map$colsUsed, view = &quot;MST&quot;, legend = knime.flow.in[[&quot;legend&quot;]], main = sampleNames(fs[i]), colorPalette = colorRampPalette(c(&quot;#00007F&quot;, &quot;blue&quot;, &quot;#007FFF&quot;, &quot;cyan&quot;, &quot;#7FFF7F&quot;, &quot;yellow&quot;, &quot;#FF7F00&quot;, &quot;red&quot;, &quot;#7F0000&quot;)))%%00010    dev.off()%%00010  }%%00010  fsom3$MST$graph &lt;- set.vertex.attribute(fsom3$MST$graph, &quot;Size&quot;, value = fsom3$MST$size)%%00010  fsom3$MST$graph &lt;- set.vertex.attribute(fsom3$MST$graph, &quot;MetaClusters&quot;, value = metaclust[,1])%%00010  for (j in 1:ncol(fsom3$map$medianValues)) {%%00010    fsom3$MST$graph &lt;- set.vertex.attribute(fsom3$MST$graph, paste(colnames(fs[[i]])[j], &quot;MEDIAN&quot;, sep = &quot;&quot;), value = fsom3$map$medianValues[,j])%%00010  }%%00010  write.graph(fsom3$MST$graph, paste(knime.flow.in[[&quot;dirname&quot;]], &quot;/FlowSOM/&quot;, &quot;FlowSOMGraphs/GML/&quot;, sampleNames(fs[i]), &quot;.gml&quot;, sep = &quot;&quot;), format = &quot;gml&quot;)%%00010}%%00010file_number &lt;- length(list.files(path = knime.flow.in[[&quot;dirname&quot;]], pattern = &quot;.fcs&quot;))%%00010colnumber &lt;- ncol(exprs(read.FCS(knime.flow.in[[&quot;Location&quot;]])))%%00010results &lt;- foreach(i = 1:file_number, j = 1:colnumber, .packages = c(&quot;flowCore&quot;, &quot;Biobase&quot;, &quot;FlowSOM&quot;, &quot;igraph&quot;, &quot;plyr&quot;)) %dopar% {  %%00010  processInput(i, j)%%00010}%%00010knime.out &lt;- read.csv(paste(knime.flow.in[[&quot;dirname&quot;]], &quot;/FlowSOM/&quot;, &quot;FlowSOMGraphs/Scatterplots/&quot;, knime.flow.in[[&quot;basename&quot;]], &quot;.csv&quot;, sep = &quot;&quot;), header = TRUE)%%00010%%00010"/>
<entry key="templateUUID" type="xstring" isnull="true" value=""/>
<entry key="version" type="xstring" value="version 1.x"/>
<entry key="Output non numbers (NaN, Inf, -Inf) as missing cells" type="xboolean" value="false"/>
</config>
<config key="nodeAnnotation">
<entry key="text" type="xstring" value=""/>
<entry key="bgcolor" type="xint" value="16777215"/>
<entry key="x-coordinate" type="xint" value="632"/>
<entry key="y-coordinate" type="xint" value="526"/>
<entry key="width" type="xint" value="134"/>
<entry key="height" type="xint" value="18"/>
<entry key="alignment" type="xstring" value="CENTER"/>
<entry key="borderSize" type="xint" value="0"/>
<entry key="borderColor" type="xint" value="0"/>
<entry key="defFontSize" type="xint" value="-1"/>
<entry key="annotation-version" type="xint" value="-1"/>
<config key="styles"/>
</config>
<entry key="customDescription" type="xstring" isnull="true" value=""/>
<entry key="state" type="xstring" value="IDLE"/>
<entry key="factory" type="xstring" value="org.knime.r.RSnippetNodeFactory"/>
<entry key="node-name" type="xstring" value="R Snippet"/>
<entry key="node-bundle-name" type="xstring" value="KNIME R-Project nodes"/>
<entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.r"/>
<entry key="node-bundle-vendor" type="xstring" value="KNIME GmbH, Konstanz, Germany"/>
<entry key="node-bundle-version" type="xstring" value="3.1.3.v201604221432"/>
<entry key="node-feature-name" type="xstring" value="KNIME Interactive R Statistics Integration"/>
<entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.r.feature.group"/>
<entry key="node-feature-vendor" type="xstring" value="KNIME GmbH, Konstanz, Germany"/>
<entry key="node-feature-version" type="xstring" value="3.1.3.v201604221432"/>
<config key="factory_settings"/>
<entry key="name" type="xstring" value="R Snippet"/>
<entry key="hasContent" type="xboolean" value="false"/>
<entry key="isInactive" type="xboolean" value="false"/>
<config key="ports">
<config key="port_1">
<entry key="index" type="xint" value="1"/>
<entry key="port_dir_location" type="xstring" isnull="true" value=""/>
</config>
</config>
<config key="filestores">
<entry key="file_store_location" type="xstring" isnull="true" value=""/>
<entry key="file_store_id" type="xstring" isnull="true" value=""/>
</config>
</config>
