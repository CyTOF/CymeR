<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
<entry key="node_file" type="xstring" value="settings.xml"/>
<config key="flow_stack"/>
<config key="internal_node_subsettings">
<entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
</config>
<config key="model">
<entry key="script" type="xstring" value="library(flowCore)%%00010library(Biobase)%%00010library(destiny)%%00010library(plyr)%%00010library(foreach)%%00010library(doParallel)%%00010library(parallel)%%00010library(data.table)%%00010numCores &lt;- knime.flow.in[[&quot;num.cores&quot;]]%%00010cl &lt;- makeCluster(numCores)       %%00010registerDoParallel(cl)%%00010files &lt;- list.files(knime.flow.in[[&quot;dirname&quot;]], full.name = TRUE, pattern = &quot;.fcs&quot;)%%00010dir.create(paste(knime.flow.in[[&quot;dirname&quot;]], &quot;/Destiny&quot;, sep = &quot;&quot;))%%00010dir.create(paste(knime.flow.in[[&quot;dirname&quot;]], &quot;/Destiny/FCS&quot;, sep = &quot;&quot;))%%00010dir.create(paste(knime.flow.in[[&quot;dirname&quot;]], &quot;/Destiny/PNG&quot;, sep = &quot;&quot;))%%00010processInput &lt;- function(i) {  %%00010  cols &lt;- knime.in%%00010  fs &lt;- read.flowSet(files = NULL, path = knime.flow.in[[&quot;dirname&quot;]], pattern = &quot;fcs&quot;)%%00010  df &lt;- as.data.frame(exprs(fs[[i]]))%%00010  df2 &lt;- as.matrix(df[, which(names(df) %in% c(as.character(t(cols))))])%%00010  if (knime.flow.in[[&quot;k&quot;]] == &quot;YES&quot;) {%%00010    neighbors &lt;- find.dm.k(nrow(df2) - 1L)%%00010  } else {%%00010    neighbors &lt;- knime.flow.in[[&quot;kcont&quot;]]%%00010  }%%00010  if (knime.flow.in[[&quot;sigma&quot;]] == &quot;YES&quot;) {%%00010    sig &lt;- find.sigmas(df2, steps = knime.flow.in[[&quot;steps&quot;]], step.size = knime.flow.in[[&quot;stepsize&quot;]], verbose = TRUE)%%00010    sigs &lt;- optimal.sigma(sig)%%00010  } else {%%00010    sig &lt;- knime.flow.in[[&quot;sigmacont&quot;]]%%00010    sigs &lt;- knime.flow.in[[&quot;sigmacont&quot;]]%%00010  }%%00010  DM &lt;- DiffusionMap(df2, sigma = sig, k = neighbors, n.eigs = 5, density.norm = as.logical(knime.flow.in[[&quot;densityNorm&quot;]]), distance = knime.flow.in[[&quot;distance&quot;]])%%00010  dimensions &lt;- as.data.frame(DM@eigenvectors)%%00010  new.cols &lt;- rename(dimensions, c(&quot;DC1&quot; = &quot;DestinyDim1&quot;, &quot;DC2&quot; = &quot;DestinyDim2&quot;, &quot;DC3&quot; = &quot;DestinyDim3&quot;, &quot;DC4&quot; = &quot;DestinyDim4&quot;, &quot;DC5&quot; = &quot;DestinyDim5&quot;))%%00010  channel_number &lt;- ncol(fs[[i]]) + 1;%%00010  channel_id     &lt;- paste(&quot;$P&quot;, channel_number, sep=&quot;&quot;);%%00010  channel_name   &lt;- &quot;Destiny.Dim1&quot;;%%00010  channel_range  &lt;- max(new.cols[,1]) + 1;%%00010  plist &lt;- matrix(c(channel_name, channel_name, channel_range, 0, channel_range - 1));%%00010  rownames(plist) &lt;- c(&quot;name&quot;, &quot;desc&quot;, &quot;range&quot;, &quot;minRange&quot;, &quot;maxRange&quot;);%%00010  colnames(plist) &lt;- c(channel_id);%%00010  channel_number2 &lt;- ncol(fs[[i]]) + 2;%%00010  channel_id2     &lt;- paste(&quot;$P&quot;, channel_number2, sep=&quot;&quot;);%%00010  channel_name2   &lt;- &quot;Destiny.Dim2&quot;;%%00010  channel_range2  &lt;- max(new.cols[,2]) + 1;%%00010  plist2 &lt;- matrix(c(channel_name2, channel_name2, channel_range2, 0, channel_range2 - 1));%%00010  rownames(plist2) &lt;- c(&quot;name&quot;, &quot;desc&quot;, &quot;range&quot;, &quot;minRange&quot;, &quot;maxRange&quot;);%%00010  colnames(plist2) &lt;- c(channel_id2);%%00010  channel_number3 &lt;- ncol(fs[[i]]) + 3;%%00010  channel_id3     &lt;- paste(&quot;$P&quot;, channel_number3, sep=&quot;&quot;);%%00010  channel_name3   &lt;- &quot;Destiny.Dim3&quot;;%%00010  channel_range3  &lt;- max(new.cols[,3]) + 1;%%00010  plist3 &lt;- matrix(c(channel_name3, channel_name3, channel_range3, 0, channel_range3 - 1));%%00010  rownames(plist3) &lt;- c(&quot;name&quot;, &quot;desc&quot;, &quot;range&quot;, &quot;minRange&quot;, &quot;maxRange&quot;);%%00010  colnames(plist3) &lt;- c(channel_id3);%%00010  channel_number4 &lt;- ncol(fs[[i]]) + 4;%%00010  channel_id4     &lt;- paste(&quot;$P&quot;, channel_number4, sep=&quot;&quot;);%%00010  channel_name4   &lt;- &quot;Destiny.Dim4&quot;;%%00010  channel_range4  &lt;- max(new.cols[,4]) + 1;%%00010  plist4 &lt;- matrix(c(channel_name4, channel_name4, channel_range4, 0, channel_range4 - 1));%%00010  rownames(plist4) &lt;- c(&quot;name&quot;, &quot;desc&quot;, &quot;range&quot;, &quot;minRange&quot;, &quot;maxRange&quot;);%%00010  colnames(plist4) &lt;- c(channel_id4);%%00010  channel_number5 &lt;- ncol(fs[[i]]) + 5;%%00010  channel_id5     &lt;- paste(&quot;$P&quot;, channel_number5, sep=&quot;&quot;);%%00010  channel_name5   &lt;- &quot;Destiny.Dim5&quot;;%%00010  channel_range5  &lt;- max(new.cols[,5]) + 1;%%00010  plist5 &lt;- matrix(c(channel_name5, channel_name5, channel_range5, 0, channel_range5 - 1));%%00010  rownames(plist5) &lt;- c(&quot;name&quot;, &quot;desc&quot;, &quot;range&quot;, &quot;minRange&quot;, &quot;maxRange&quot;);%%00010  colnames(plist5) &lt;- c(channel_id5);%%00010  params &lt;- parameters(fs[[i]]);%%00010  pd &lt;- pData(params);%%00010  pd &lt;- rbind(pd, t(plist), t(plist2), t(plist3), t(plist4), t(plist5));%%00010  pData(params) &lt;- pd;%%00010  out_data &lt;- cbind(exprs(fs[[i]]), &quot;Destiny.Dim1&quot; = new.cols[,1], &quot;Destiny.Dim2&quot; = new.cols[,2], &quot;Destiny.Dim3&quot; = new.cols[,3], &quot;Destiny.Dim4&quot; = new.cols[,4], &quot;Destiny.Dim5&quot; = new.cols[,5]);%%00010  out_frame &lt;- flowFrame(out_data, params, description = description(fs[[i]]));%%00010  write.FCS(out_frame, paste(knime.flow.in[[&quot;dirname&quot;]], &quot;/Destiny/FCS/&quot;, sampleNames(fs[i]), sep = &quot;&quot;), what=&quot;numeric&quot;)%%00010  png(filename = paste(knime.flow.in[[&quot;dirname&quot;]], &quot;/Destiny/PNG/&quot;, sampleNames(fs[i]), &quot;.png&quot;, sep = &quot;&quot;))%%00010  plot(eigenvalues(DM), ylim = 0:1, pch = 20, xlab ='Diffusion component (DC)', ylab ='Eigenvalue', main = paste(&quot;The plot will show a continuous decline instead of sharp drops&quot;, &quot;\n&quot;, &quot;if either the dataset is too big or the sigma is too small.&quot;, &quot;\n&quot;, &quot;The chosen sigma value was &quot;, sigs, sep = &quot;&quot;))%%00010  dev.off()%%00010}%%00010file_number &lt;- length(files)%%00010results &lt;- foreach(i = 1:file_number, .packages = c(&quot;flowCore&quot;, &quot;Biobase&quot;, &quot;destiny&quot;, &quot;spade&quot;, &quot;plyr&quot;)) %dopar% {  %%00010  processInput(i)%%00010}%%00010knime.out &lt;- as.data.frame(exprs(read.FCS(paste(knime.flow.in[[&quot;dirname&quot;]], &quot;/Destiny/FCS/&quot;, knime.flow.in[[&quot;basename&quot;]], sep = &quot;&quot;))))%%00010%%00010%%00010"/>
<entry key="templateUUID" type="xstring" isnull="true" value=""/>
<entry key="version" type="xstring" value="version 1.x"/>
<entry key="Output non numbers (NaN, Inf, -Inf) as missing cells" type="xboolean" value="false"/>
</config>
<config key="nodeAnnotation">
<entry key="text" type="xstring" value="desinty"/>
<entry key="bgcolor" type="xint" value="16777215"/>
<entry key="x-coordinate" type="xint" value="713"/>
<entry key="y-coordinate" type="xint" value="419"/>
<entry key="width" type="xint" value="134"/>
<entry key="height" type="xint" value="18"/>
<entry key="alignment" type="xstring" value="CENTER"/>
<entry key="borderSize" type="xint" value="0"/>
<entry key="borderColor" type="xint" value="16777215"/>
<entry key="defFontSize" type="xint" value="11"/>
<entry key="annotation-version" type="xint" value="20151123"/>
<config key="styles"/>
</config>
<entry key="customDescription" type="xstring" isnull="true" value=""/>
<entry key="state" type="xstring" value="IDLE"/>
<entry key="factory" type="xstring" value="org.knime.r.RSnippetNodeFactory"/>
<entry key="node-name" type="xstring" value="R Snippet"/>
<entry key="node-bundle-name" type="xstring" value="KNIME R-Project nodes"/>
<entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.r"/>
<entry key="node-bundle-vendor" type="xstring" value="KNIME GmbH, Konstanz, Germany"/>
<entry key="node-bundle-version" type="xstring" value="3.1.3.v201604221432"/>
<entry key="node-feature-name" type="xstring" value="KNIME Interactive R Statistics Integration"/>
<entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.r.feature.group"/>
<entry key="node-feature-vendor" type="xstring" value="KNIME GmbH, Konstanz, Germany"/>
<entry key="node-feature-version" type="xstring" value="3.1.3.v201604221432"/>
<config key="factory_settings"/>
<entry key="name" type="xstring" value="R Snippet"/>
<entry key="hasContent" type="xboolean" value="false"/>
<entry key="isInactive" type="xboolean" value="false"/>
<config key="ports">
<config key="port_1">
<entry key="index" type="xint" value="1"/>
<entry key="port_dir_location" type="xstring" isnull="true" value=""/>
</config>
</config>
<config key="filestores">
<entry key="file_store_location" type="xstring" isnull="true" value=""/>
<entry key="file_store_id" type="xstring" isnull="true" value=""/>
</config>
</config>
